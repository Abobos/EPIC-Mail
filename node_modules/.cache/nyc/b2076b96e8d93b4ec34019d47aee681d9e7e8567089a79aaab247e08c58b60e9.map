{"version":3,"sources":["validateUserDetails.js"],"names":["validateUserSignUpDetails","userDetails","schema","firstName","Joi","string","regex","error","Error","lastName","email","password","trim","min","required","validate","validateUserSignInDetails","signup","req","res","done","body","status","json","details","message","replace","login"],"mappings":"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","sourceRoot":"C:\\Users\\Blessing Abobo\\EPIC-Mail\\src\\Server\\middlewares","sourcesContent":["import Joi from 'joi';\n\nfunction validateUserSignUpDetails(userDetails) {\n  const schema = {\n    firstName: Joi.string()\n      .regex(/^[a-zA-Z]+$/)\n      .error(new Error('firstName is not valid')),\n\n    lastName: Joi.string()\n      .regex(/^[a-zA-Z]+$/)\n      .error(new Error('lastName is not valid')),\n\n    email: Joi.string().email()\n      .regex(/^[A-Za-z0-9_]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}$/)\n      .error(new Error('email is not valid')),\n    password: Joi.string().trim().min(6).required(),\n  };\n  return Joi.validate(userDetails, schema);\n}\n\nfunction validateUserSignInDetails(userDetails) {\n  const schema = {\n    email: Joi.string().email()\n      .regex(/^[A-Za-z0-9_]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}$/)\n      .error(new Error('email is not valid')),\n\n    password: Joi.string().min(6).required(),\n  };\n  return Joi.validate(userDetails, schema);\n}\n\nconst signup = (req, res, done) => {\n  const {\n    firstName, lastName, email, password,\n  } = req.body;\n  if (!firstName) {\n    return res.status(400).json({\n      status: 400,\n      error: 'firstName is required',\n    });\n  }\n  if (!lastName) {\n    return res.status(400).json({\n      status: 400,\n      error: 'lastName is required',\n    });\n  }\n  if (!email) {\n    return res.status(400).json({\n      status: 400,\n      error: 'email is required',\n    });\n  }\n  if (!password) {\n    return res.status(400).json({\n      status: 400,\n      error: 'password is required',\n    });\n  }\n  const { error } = validateUserSignUpDetails(req.body);\n  if (error) {\n    return res.status(400).json({\n      status: 400,\n      error: (error.details) ? error.details[0].message.replace(/[\"\"]+/g, '') : error.message,\n    });\n  }\n  return done();\n};\n\nconst login = (req, res, done) => {\n  const { email, password } = req.body;\n  if (!email) {\n    return res.status(400).json({\n      status: 400,\n      error: 'email is required',\n    });\n  }\n  if (!password) {\n    return res.status(400).json({\n      status: 400,\n      error: 'password is required',\n    });\n  }\n  const { error } = validateUserSignInDetails(req.body);\n  if (error) {\n    return res.status(400).json({\n      status: 400,\n      error: (error.details) ? error.details[0].message.replace(/[\"\"]+/g, '') : error.message,\n    });\n  }\n  return done();\n};\n\n\nexport { signup, login };\n"]}