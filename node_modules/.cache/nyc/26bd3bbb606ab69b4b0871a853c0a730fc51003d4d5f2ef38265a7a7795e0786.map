{"version":3,"sources":["usersControllers.js"],"names":["UsersControllers","req","res","body","error","status","json","message","replace","getuser","users","find","userDetails","email","hashPassword","bcrypt","hashSync","password","payload","firstName","lastName","userToken","jwt","sign","expiresIn","user","id","length","authData","push","data","token","hashValue","compareSync"],"mappings":"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","sourceRoot":"C:\\Users\\Blessing Abobo\\EPIC-Mail\\src\\Server\\controllers","sourcesContent":["import bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport users from '../database/users';\nimport { validateUserSignUpDetails, validateUserSignInDetails } from '../middlewares/validateUserDetails';\n\n\nclass UsersControllers {\n// eslint-disable-next-line class-methods-use-this\n  static userSignUp(req, res) {\n    const { error } = validateUserSignUpDetails(req.body);\n    if (error) {\n      return res.status(400).json({\n        status: 400,\n        error: error.message.replace(/[\"\"]+/g, ''),\n      });\n    }\n    const getuser = users.find(userDetails => userDetails.email === req.body.email);\n    if (getuser) {\n      return res.status(409).json({\n        status: 409,\n        error: 'User already exists, Sign In!',\n      });\n    }\n    const hashPassword = bcrypt.hashSync(req.body.password, 10);\n    const payload = {\n      firstName: req.body.firstName,\n      lastName: req.body.lastName,\n      email: req.body.email,\n      password: hashPassword,\n    };\n    const userToken = jwt.sign(payload, 'secret', { expiresIn: 1440 });\n    const user = {\n      id: users.length + 1,\n      firstName: req.body.firstName,\n      lastName: req.body.lastName,\n      email: req.body.email,\n      password: hashPassword,\n      authData: userToken,\n    };\n    users.push(user);\n    return res.status(201).json({\n      status: 201,\n      data: [\n        {\n          token: userToken,\n        },\n      ],\n    });\n  }\n\n  static userSignIn(req, res) {\n    const { error } = validateUserSignInDetails(req.body);\n    if (error) {\n      return res.status(400).json({\n        status: 400,\n        error: error.message.replace(/[\"\"]+/g, ''),\n      });\n    }\n    const user = users.find(userDetails => userDetails.email === req.body.email);\n    if (!user) {\n      return res.status(404).json({\n        status: 404,\n        error: 'Details not found, Sign Up!',\n      });\n    }\n    const { authData, password } = user;\n    const hashValue = bcrypt.compareSync(req.body.password, password);\n    if (!hashValue) {\n      return res.status(401).json({\n        status: 401,\n        error: 'Incorrect password!',\n      });\n    }\n    return res.status(200).json({\n      status: 200,\n      data: [\n        {\n          token: authData,\n        },\n      ],\n    });\n  }\n}\n\n\nexport default UsersControllers;\n"]}