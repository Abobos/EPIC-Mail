{"version":3,"sources":["users.v1.Controllers.js"],"names":["dotenv","config","UsersControllers","req","res","body","firstName","lastName","email","password","pool","query","err","result","rows","length","status","json","error","hashPassword","bcrypt","hashSync","payload","userToken","jwt","sign","process","env","SECRET_KEY","expiresIn","user","data","token"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;AAEAA,gBAAOC,MAAP;;IAEMC,gB;;;;;;;;;+BACcC,G,EAAKC,G,EAAK;AAAA,sBAGtBD,GAAG,CAACE,IAHkB;AAAA,UAExBC,SAFwB,aAExBA,SAFwB;AAAA,UAEbC,QAFa,aAEbA,QAFa;AAAA,UAEHC,KAFG,aAEHA,KAFG;AAAA,UAEIC,QAFJ,aAEIA,QAFJ;;AAI1BC,oBAAKC,KAAL,CAAW,sCAAX,EAAmD,CAACH,KAAD,CAAnD,EAA4D,UAACI,GAAD,EAAMC,MAAN,EAAiB;AAC3E,YAAID,GAAJ,EAAS,MAAMA,GAAN;;AACT,YAAIC,MAAM,CAACC,IAAP,CAAYC,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,iBAAOX,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,YAAAA,MAAM,EAAE,GADkB;AAE1BE,YAAAA,KAAK,EAAE;AAFmB,WAArB,CAAP;AAID;;AACD,YAAMC,YAAY,GAAGC,gBAAOC,QAAP,CAAgBZ,QAAhB,EAA0B,EAA1B,CAArB;;AACA,YAAMa,OAAO,GAAG;AACdhB,UAAAA,SAAS,EAAEH,GAAG,CAACE,IAAJ,CAASC,SADN;AAEdC,UAAAA,QAAQ,EAAEJ,GAAG,CAACE,IAAJ,CAASE,QAFL;AAGdC,UAAAA,KAAK,EAAEL,GAAG,CAACE,IAAJ,CAASG;AAHF,SAAhB;;AAKA,YAAMe,SAAS,GAAGC,sBAAIC,IAAJ,CAASH,OAAT,EAAkBI,OAAO,CAACC,GAAR,CAAYC,UAA9B,EAA0C;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAA1C,CAAlB;;AACAnB,sBAAKC,KAAL,CAAW,mFAAX,EACE,CAACL,SAAD,EAAYC,QAAZ,EAAsBC,KAAtB,EAA6BW,YAA7B,CADF,EAC8C,UAACD,KAAD,EAAQY,IAAR,EAAiB;AAC3D,cAAIZ,KAAJ,EAAW,MAAMA,KAAN;;AACX,cAAIY,IAAI,CAAChB,IAAT,EAAe;AACb,mBAAOV,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,cAAAA,MAAM,EAAE,GADkB;AAE1Be,cAAAA,IAAI,EAAE,CACJ;AACEC,gBAAAA,KAAK,EAAET;AADT,eADI;AAFoB,aAArB,CAAP;AAQD;AACF,SAbH;AAcD,OA7BD;AA8BD,K,CAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;eAIerB,gB","sourceRoot":"/Users/andela/Documents/EPIC-Mail/src/Server/controllers","sourcesContent":["import bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport dotenv from 'dotenv';\nimport pool from '../database/config/pool';\n\ndotenv.config();\n\nclass UsersControllers {\n  static userSignUp(req, res) {\n    const {\n      firstName, lastName, email, password,\n    } = req.body;\n    pool.query('SELECT * FROM users WHERE email = $1', [email], (err, result) => {\n      if (err) throw err;\n      if (result.rows.length > 0) {\n        return res.status(409).json({\n          status: 409,\n          error: 'User already exists, Sign In!',\n        });\n      }\n      const hashPassword = bcrypt.hashSync(password, 10);\n      const payload = {\n        firstName: req.body.firstName,\n        lastName: req.body.lastName,\n        email: req.body.email,\n      };\n      const userToken = jwt.sign(payload, process.env.SECRET_KEY, { expiresIn: 1440 });\n      pool.query('INSERT INTO users (firstname, lastname, email , password) VALUES ($1, $2, $3, $4)',\n        [firstName, lastName, email, hashPassword], (error, user) => {\n          if (error) throw error;\n          if (user.rows) {\n            return res.status(201).json({\n              status: 201,\n              data: [\n                {\n                  token: userToken,\n                },\n              ],\n            });\n          }\n        });\n    });\n  }\n\n//   static userSignIn(req, res) {\n//     const user = users.find(userDetails => userDetails.email === req.body.email);\n//     if (!user) {\n//       return res.status(404).json({\n//         status: 404,\n//         error: 'Details not found, Sign Up!',\n//       });\n//     }\n//     const { authData, password } = user;\n//     const hashValue = bcrypt.compareSync(req.body.password, password);\n//     if (!hashValue) {\n//       return res.status(401).json({\n//         status: 401,\n//         error: 'Incorrect password!',\n//       });\n//     }\n//     return res.status(200).json({\n//       status: 200,\n//       data: [\n//         {\n//           token: authData,\n//         },\n//       ],\n//     });\n//   }\n}\n\n\nexport default UsersControllers;\n"]}