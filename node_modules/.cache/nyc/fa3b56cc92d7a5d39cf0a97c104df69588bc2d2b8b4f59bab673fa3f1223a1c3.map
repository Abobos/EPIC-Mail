{"version":3,"sources":["users.v1.Controllers.js"],"names":["dotenv","config","UsersControllers","req","res","body","firstName","lastName","email","password","pool","query","err","result","next","rows","length","status","json","error","hashPassword","bcrypt","hashSync","payload","userToken","jwt","sign","process","env","SECRET_KEY","expiresIn","user","done","data","token","hashpassword","hashValue","compareSync"],"mappings":"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","sourceRoot":"C:\\Users\\Blessing Abobo\\EPIC-Mail\\src\\Server\\controllers","sourcesContent":["import bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\nimport dotenv from 'dotenv';\r\nimport pool from '../database/config/pool';\r\n\r\ndotenv.config();\r\n\r\nclass UsersControllers {\r\n  static userSignUp(req, res) {\r\n    const {\r\n      firstName, lastName, email, password,\r\n    } = req.body;\r\n    pool.query('SELECT * FROM users WHERE email = $1', [email], (err, result, next) => {\r\n      if (err) throw err;\r\n      if (result.rows.length > 0) {\r\n        return res.status(409).json({\r\n          status: 409,\r\n          error: 'User already exists, Sign In!',\r\n        });\r\n      }\r\n      const hashPassword = bcrypt.hashSync(password, 10);\r\n      const payload = {\r\n        firstName: req.body.firstName,\r\n        lastName: req.body.lastName,\r\n        email: req.body.email,\r\n      };\r\n      const userToken = jwt.sign(payload, process.env.SECRET_KEY, { expiresIn: '1h' });\r\n      pool.query('INSERT INTO users (firstname, lastname, email , password) VALUES ($1, $2, $3, $4)',\r\n        [firstName, lastName, email, hashPassword], (error, user, done) => {\r\n          if (error) throw error;\r\n          if (user.rows) {\r\n            return res.status(201).json({\r\n              status: 201,\r\n              data: [\r\n                {\r\n                  token: userToken,\r\n                },\r\n              ],\r\n            });\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  static userSignIn(req, res) {\r\n    const { email } = req.body;\r\n    pool.query('SELECT * FROM users WHERE email = $1', [email], (err, result) => {\r\n      if (err) throw err;\r\n      if (result.rows.length === 0) {\r\n        return res.status(404).json({\r\n          status: 404,\r\n          error: 'Details not found, Sign Up!',\r\n        });\r\n      }\r\n      const hashpassword = result.rows[0].password;\r\n      const hashValue = bcrypt.compareSync(req.body.password, hashpassword);\r\n      if (!hashValue) {\r\n        return res.status(401).json({\r\n          status: 401,\r\n          error: 'Incorrect password!',\r\n        });\r\n      }\r\n      const payload = {\r\n        firstName: req.body.firstName,\r\n        lastName: req.body.lastName,\r\n        email: req.body.email,\r\n      };\r\n      const userToken = jwt.sign(payload, process.env.SECRET_KEY, { expiresIn: '1h' });\r\n      return res.status(200).json({\r\n        status: 200,\r\n        data: [\r\n          {\r\n            token: userToken,\r\n          },\r\n        ],\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport default UsersControllers;\r\n"]}