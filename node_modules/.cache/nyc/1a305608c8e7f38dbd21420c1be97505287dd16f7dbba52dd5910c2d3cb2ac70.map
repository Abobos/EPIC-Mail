{"version":3,"sources":["validateUserDetails.js"],"names":["validateUserSignUpDetails","userDetails","schema","firstName","Joi","string","regex","required","error","Error","lastName","email","trim","password","min","validate","validateUserSignInDetails","signup","req","res","done","body","status","json","message","replace","login"],"mappings":"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","sourceRoot":"C:\\Users\\Blessing Abobo\\EPIC-Mail\\src\\Server\\middlewares","sourcesContent":["import Joi from 'joi';\n\nfunction validateUserSignUpDetails(userDetails) {\n  const schema = {\n    firstName: Joi.string()\n      .regex(/^[a-zA-Z]+$/)\n      .required()\n      .error(new Error('firstName is not valid')),\n\n    lastName: Joi.string()\n      .regex(/^[a-zA-Z]+$/)\n      .required()\n      .error(new Error('lastName is not valid')),\n\n    email: Joi.string().trim().email()\n      .regex(/^[A-Za-z0-9_]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}$/)\n      .required()\n      .error(new Error('email is not valid')),\n    password: Joi.string().trim().min(6).required(),\n  };\n  return Joi.validate(userDetails, schema);\n}\n\nfunction validateUserSignInDetails(userDetails) {\n  const schema = {\n    email: Joi.string().email()\n      .regex(/^[A-Za-z0-9_]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}$/)\n      .required()\n      .error(new Error('email is not valid')),\n\n    password: Joi.string().min(6).required(),\n  };\n  return Joi.validate(userDetails, schema);\n}\n\nconst signup = (req, res, done) => {\n  const {\n    firstName, lastName, email, password,\n  } = req.body;\n  if (!firstName) {\n    return res.status(400).json({\n      status: 400,\n      error: 'firstName is required',\n    });\n  }\n  if (!lastName) {\n    return res.status(400).json({\n      status: 400,\n      error: 'lastName is required',\n    });\n  }\n  if (!email) {\n    return res.status(400).json({\n      status: 400,\n      error: 'email is required',\n    });\n  }\n  if (!password) {\n    return res.status(400).json({\n      status: 400,\n      error: 'password is required',\n    });\n  }\n  const { error } = validateUserSignUpDetails(req.body);\n  if (error) {\n    return res.status(400).json({\n      status: 400,\n      error: error.message.replace(/[\"\"]+/g, ''),\n    });\n  }\n  return done();\n};\n\nconst login = (req, res, done) => {\n  const { email, password } = req.body;\n  if (!email) {\n    return res.status(400).json({\n      status: 400,\n      error: 'email is required',\n    });\n  }\n  if (!password) {\n    return res.status(400).json({\n      status: 400,\n      error: 'password is required',\n    });\n  }\n  const { error } = validateUserSignInDetails(req.body);\n  if (error) {\n    return res.status(400).json({\n      status: 400,\n      error: error.message.replace(/[\"\"]+/g, ''),\n    });\n  }\n  return done();\n};\n\n\nexport { signup, login };\n"]}